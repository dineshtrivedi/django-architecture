from dataclasses import asdict, dataclass
from typing import Optional

from django.http import JsonResponse
from djangorestframework_camel_case.parser import CamelCaseJSONParser
from djangorestframework_camel_case.render import CamelCaseJSONRenderer
from drf_yasg.utils import swagger_auto_schema
from rest_framework.decorators import api_view
from rest_framework.views import APIView
from rest_framework_dataclasses.serializers import DataclassSerializer

__all__ = ['HelloWorldViewDataclass', 'HelloWorld', 'HelloWorldManyExample', 'HelloWorldManyViewDataclass']


# Maybe this is an issue to open on djangorestframework-dataclasses
# Optional says on swagger that it is not compulsory
# However, it seems to me that it should be compulsory, but it accepts None
# Which is different if height: Optional[float] was height: float = None
# The reason for that is that If I don't provide height hello_world_data.validated_data fails when trying to
# instantiate HelloWorld because height it not provided


@dataclass
class HelloWorld:
    first_name: str
    surname: str
    age: int

    # Optional[float] is not required on payload and swagger, but fails on hello_world_data.validated_data because it
    # is not provided and has no default value
    # FIXME: This should be required still in the serializer object but with allow_null=True
    height_only_optional: Optional[float]

    # float = None - Required in the payload and swagger, so the default value does not make any difference
    # FIXME: Should we make required as False when the dataclass has default value?
    height_none_default: float = None

    # Optional[float] = None - Not required in the payload and swagger, and height was set to None. This worked :)
    # FIXME: Should this add default=None to serializer?
    height_option_and_none_default: Optional[float] = None

    # FIXME: Should the rule be?
    # Optional is always allow_null=True (and required=True), but it is required=False only if there is default value
    # Require=False is not set in any other case, but with default value
    # Add has_default_value to TypeInfo and make the field required=False if it has default value
    # Why?
    # required=False seems to be complicated on the dataclass since in the serializer it means the data won't necessary be there
    # but for the dataclass to be instantiated successfully the data needs to be there unless it has default value


# Should this be internal?
class HelloWorldInput(DataclassSerializer):
    """
    >>> print(repr(HelloWorldInput()))
    HelloWorldInput():
        first_name = CharField()
        surname = CharField()
        age = IntegerField()
        height_only_optional = FloatField(allow_null=True, required=False)
        height_none_default = FloatField()
        height_option_and_none_default = FloatField(allow_null=True, required=False)
    """
    class Meta:
        dataclass = HelloWorld


class HelloWorldViewDataclass(APIView):
    parser_classes = (CamelCaseJSONParser,)
    renderer_classes = (CamelCaseJSONRenderer,)

    @swagger_auto_schema(request_body=HelloWorldInput)
    def post(self, request):
        hello_world_data = HelloWorldInput(data=request.data)
        hello_world_data.is_valid(raise_exception=True)
        return JsonResponse({"received": asdict(hello_world_data.validated_data)})


## This is maybe another issue to bre created on djangorestframework-dataclasses
# When using many=True in a Serializer Generated by DataclassSerializer, the Optional Field (the id field in the example below)
# Will have value of <class 'rest_framework.fields.empty'>
# the correct value would be to be None when id is not provided


@dataclass
class HelloWorldManyExample:
    name: str
    mobile_number: str
    id_only_optional: Optional[int]
    id_only_default: int = None
    id_default_and_optional: Optional[int] = None


class HelloWorldManyInput(DataclassSerializer):
    class Meta:
        dataclass = HelloWorldManyExample


class HelloWorldManyViewDataclass(APIView):
    parser_classes = (CamelCaseJSONParser,)
    renderer_classes = (CamelCaseJSONRenderer,)

    @swagger_auto_schema(request_body=HelloWorldManyInput(many=True))
    def post(self, request):
        hello_world_many_data = HelloWorldManyInput(data=request.data, many=True)
        hello_world_many_data.is_valid(raise_exception=True)
        return JsonResponse({"received": [asdict(data) for data in hello_world_many_data.validated_data]})


@swagger_auto_schema(method='post', request_body=HelloWorldManyInput(many=True))
@api_view(['POST'])
def many_api_view(request):
    hello_world_many_data = HelloWorldManyInput(data=request.data, many=True)
    hello_world_many_data.is_valid(raise_exception=True)
    return JsonResponse({"received": [asdict(data) for data in hello_world_many_data.validated_data]})

